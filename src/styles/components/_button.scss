.btn {
  position: relative;
  display: flex;
  // Fixes weird empty space below bottom-most button on Chrome
  overflow: hidden;
  flex-grow: 1;
  align-items: center;
  justify-content: space-around;

  background: none;
  opacity: 1;
  transition: all 0.3s;
}

.btn[disabled] {
  opacity: 0.1;
  pointer-events: none;
}

.btn:hover,
.btn:focus {
  // We don't need the blue focus outline, since we will be defining our own focus
  outline: none;
}

/*--------------------------------------------------------
---------------------STAGE BUTTONS--------------------
--------------------------------------------------------*/

.btn--modal {
  position: absolute;
  top: 0;
  right: 0;
  padding: padding(S);
  margin: margin(M);

  border: 2px solid color(black);
  background: color(white);
  border-radius: $radius-subtle;
  font-size: 2rem;
  font-weight: 600;
  opacity: 0.5;
  transition: all 0.3s;
}

@include if-hover() {
  .btn--modal { padding: padding(XS) }

  .btn--modal:hover,
  .btn--modal[data-focus-visible-added] {
    padding: padding(S);
  }
}

/*--------------------------------------------------------
---------------------DRIVER BUTTONS--------------------
--------------------------------------------------------*/

.btn--driver {
  display: flex;
  width: 100%; 
  align-items: center;
  justify-content: center;

  @include bp(small) {
    width: 50%;
    min-height: 50%;
  }

  &__icon {
    height: 5rem;

    // Inherit the color from .btn--driver since we want the icons and text to have the same color
    fill: currentColor;
    transition: all 0.3s;

    @include bp(small) {
      transform: translateX(20%);
    }
  }

  &::before {
    position: absolute;
    left: 30%;
    display: inline-block;
    width: 3rem;

    // Inherit the color from .btn--driver since we want the icons and text to have the same color
    color: currentColor;
    content: attr(data-tool-tip);
    font-size: 2.5rem;
    opacity: 0;
    transition: all 0.3s;
    visibility: hidden;

    @include bp(small) {
      left: 20%;
      opacity: 1;
      visibility: visible;
    }
  }
}

@include if-hover() {
  .btn--driver:hover,
  .btn--driver[data-focus-visible-added] {
    width: 110%;
    // Balance out extra width and prevent horizontal overflow
    margin-left: -10%;
    border-bottom-left-radius: $radius-subtle;
    border-top-left-radius: $radius-subtle;

    @include bp(small) {
      z-index: z(top);
      width: 50%;
      margin-left: 0%;
      border-radius: 0;
    }

    .btn--driver__icon {
      opacity: 0.3;

      @include bp(small) {
        opacity: 1;
        // TranslateX here to preserve TranslateX without hover
        transform: translateX(20%) scale(1.1);
      }
    }

    &::before {
      left: 20%;
      opacity: 1;
      visibility: visible;

      @include bp(small) {
        transform: scale(1.2);
      }
    }
  }
}

//---------------SPECIFIC DRIVER BUTTONS----------------------

.btn--driver.clear-all { @include button-color-scheme(color(secondary)) }

.btn--driver.play { @include button-color-scheme(color(primary)) }

.btn--driver.play-auto { @include button-color-scheme(darken(color(primary), 10%)) }

.btn--driver.spawn-points { @include button-color-scheme(color(tertiary)) }

.btn--driver.next-step { 
  @include button-color-scheme(color(primary)) 
  @include bp(small) {
    height: 100%;
  }
}

.btn--driver.switch-mode { 
  @include button-color-scheme(color(tertiary)) 
  @include bp(small) {
    height: 100%;
  }
}
